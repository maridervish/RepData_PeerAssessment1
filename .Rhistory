install.packages("ggplot2")
library(ggplot2)
search()
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
search()
install.packages("KernSmooth")
library(KernSmooth)
exit
library(xlsx)
library(xlsx)
install.packages("httpuv")
library(httr)
library(httpuv)
myapp=oauth_app("github",key="517b89a4ae963d56794c",secret="a6081bc92da994f60d05eb1f8d667a54439a65f9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
quiz=GET("https://api.github.com/users/jtleek/repos",config(token=github_token))
head(quiz)
stop_for_status(quiz)
content(quiz)
help(mean)
help(lapply)
list.files
help(list.files)
help()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
atributes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "raiting", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
swirl()
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
NOT (5=7)
NOT 5=7
NOT (5==7)
5 NOT == 7
!(5==7)
false&false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hello")
submit()
mad_libs("New York","crazy","flag")
submit()
"I"%p%"love"%p%"R!"
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,-r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3,correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattice
?splom
?trellis.par.set
?print.trellis
?lpoints
?text
library(dplyr)
data<-read.csv("./activity.csv")
setwd("D:\\DataScientist\\RepResearch\\Project1")
data<-read.csv("./activity.csv")
TotalSteps<-summarise(group_by(data,date),StepSum=sum(steps,na.rm=T))
AverageSteps<-summarise(group_by(data,interval),Mean=mean(steps,na.rm=T))
data<-merge(data,AverageSteps,all=T)
data<-arrange(data,desc(Mean))
data$date<-as.POSIXlt(data$date)
data$weekday<-weekdays(data$date)
week<-data$weekday=="Saturday"|data$weekday=="Sunday"
data$weekday[week]<-"Weekend"
data$weekday[!week]<-"Weekday"
data$weekday<-as.factor(data$weekday)
library(lattice)
xyplot(Mean~interval|weekday,data=data,type="l")
head(AverageSteps)
head(data)
str(data)
data<-read.csv("./activity.csv")
data<-merge(data,AverageSteps,all=T)
head(data)
data$date<-as.POSIXlt(data$date)
str(data)
data$weekday<-weekdays(data$date)
head(data)
Sys.setlocale("LC_TIME", "English")
data$weekday<-weekdays(data$date)
week<-data$weekday=="Saturday"|data$weekday=="Sunday"
data$weekday[week]<-"Weekend"
data$weekday[!week]<-"Weekday"
head(data)
data$weekday<-as.factor(data$weekday)
head(data)
xyplot(interval~Mean|weekday,data=data,type="l")
xyplot(Mean~interval|weekday,data=data,type="l")
AverageStepsW<-summarise(group_by(data,weekday,interval),MeanWeekday=mean(steps,na.rm=T))
?strptime
(data$date,"%e/%m/%Y")
data$date<-strptime(data$date,"%e/%m/%Y")
data$weekday<-weekdays(data$date)
data$weekday[week]<-"Weekend"
data$weekday[!week]<-"Weekday"
data$weekday<-as.factor(data$weekday)
AverageStepsW<-summarise(group_by(data,weekday,interval),MeanWeekday=mean(steps,na.rm=T)
)
data$date<-as.POSIXct(data$date)
AverageStepsW<-summarise(group_by(data,weekday,interval),MeanWeekday=mean(steps,na.rm=T))
data<-merge(data,AverageSteps,all=T)
head(data)
data<-read.csv("./activity.csv")
AverageSteps<-summarise(group_by(data,interval),Mean=mean(steps,na.rm=T))
data<-merge(data,AverageSteps,all=T)
data$date<-as.POSIXct(data$date)
data$weekday<-weekdays(data$date)
head(data)
week<-data$weekday=="Saturday"|data$weekday=="Sunday"
data$weekday[week]<-"Weekend"
data$weekday[!week]<-"Weekday"
data$weekday<-as.factor(data$weekday)
AverageStepsW<-summarise(group_by(data,weekday,interval),MeanWeekday=mean(steps,na.rm=T))
data<-merge(data,AverageSteps,all=T)
g<-ggplot(data,aes(x=interval,y=MeanWeekday))
library(ggplot)
library(ggplot2)
g<-ggplot(data,aes(x=interval,y=MeanWeekday))
g+geom_line()+facet_grid(.~weekday)
head(data)
head(AverageStepsW)
AverageStepsW$test<-paste(AverageStepsW$weekday,AverageStepsW$interval)
newdata<-transform(data,test=paste(data$weekday,data$interval))
head(newdata)
str(newdata)
tail(newdata)
newdata<-merge(newdata,AverageStepsW,by.x=test,by.y=test)
newdata<-merge(newdata,AverageStepsW,by.x="test",by.y="test")
g<-ggplot(newdata,aes(x=interval,y=MeanWeekday))
g+geom_line()+facet_grid(.~weekday)
?aggregate
a<-with(data, aggregate(steps~interval+weekday,mean,na.rm=T))
a<-with(data, aggregate(steps~interval+weekday,data=data, mean,na.rm=T))
head(a)
data$a<-with(data, aggregate(steps~interval+weekday,data=data, mean,na.rm=T))
head(AverageStepW)
head(AverageStepsW)
g<-ggplot(a,aes(x=interval,y=step))
g+geom_line()+facet_grid(.~weekday)
str(data)
